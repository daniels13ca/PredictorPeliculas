---
title: "Calificación colaborativa de películas"
author: "Daniel Silva Barrera"
runtime: shiny
output: 
  flexdashboard::flex_dashboard:
    source: embed
---

```{r setup, include=FALSE}
library("shiny")
library("flexdashboard")
```

```{r}
library("ggplot2")
library("xlsx")

data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")

genres <- unique(data$Genero)
```

Selecciones {.sidebar}
===============================

Seleccione los géneros a filtrar

```{r}
checkboxGroupInput("movie_type", label = "Géneros", genres, selected = genres)
```

Calificaciones 
=====================================

Columna 1 {data-width=200}
------------------------------------
### Histograma

```{r}
library(plotly)

x <- list(title = "Calificación")
y <- list(title = "Recuento")

renderPlotly({
  movies <- unique(top_movies[top_movies$Genero %in% input$movie_type, c(1, 2, 4)])
  g <- plot_ly(x = movies$Calificación, type = "histogram") %>% layout(xaxis = x, yaxis = y)
  ggplotly(g)
})
```

Columna 2 {data-width=300}
-------------------------------------

### Calificaciones medias

```{r}
library(plotly)

renderValueBox({
  movies <- unique(top_movies[top_movies$Genero %in% input$movie_type, c(1, 2, 4)])
  valueBox(round(mean(movies$Calificación), 2), icon = "ion-videocamera", 
           caption="Calificación media", color="blue")
})

```

### Películas calificadas

```{r}
library(plotly)

renderValueBox({
  movies <- unique(top_movies[top_movies$Genero %in% input$movie_type, c(1, 2, 4)])
  valueBox(nrow(movies), icon = "ion-videocamera", 
           caption="Películas calificadas", color="blue")
})

```

### Desviación estandar

```{r}
library(plotly)

renderValueBox({
  movies <- unique(top_movies[top_movies$Genero %in% input$movie_type, c(1, 2, 4)])
  valueBox(round(sd(movies$Calificación), 2), icon = "ion-videocamera", 
           caption="Desviación estándar", color="blue")
})

```

### Tendencia histórica de calificaciones

```{r}
library(dygraphs)
renderDygraph({
  years <- unique(top_movies[top_movies$Genero %in% input$movie_type, c(1, 2, 4)])
  mean_by_year = tapply(years$Calificación, years$Año, mean)
  ## Create ts object
  x = ts(as.vector(mean_by_year), start=1920, end=2020)
  y = cbind(Rating=x)
  
  ## Plot code
  dygraph(y, main = "Tendencia de la calificación media", 
          ylab = "Calificación",group="Ratings") %>% 
    dyRangeSelector() %>%
    dyOptions(stepPlot = TRUE) %>%
    dySeries("V1", label = "Calificación")
})
```

Películas
===================================== 

Columna {.tabset .tabset-fade}
-------------------------------------

### Películas

```{r}

top_movies <- data[order(-data$Calificación),]
top_movies <- top_movies[, c(2, 3, 7, 8)]

DT::renderDataTable({
  top_movies <- unique(top_movies[top_movies$Genero %in% input$movie_type, c(1, 2, 4)])
  DT::datatable(top_movies, rownames = FALSE)
})
```

Acerca de
===================================== 

### ¿Cómo funciona?

Descontento por.....
