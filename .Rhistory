install.packages("knitr")
install.packages(c("assertthat", "backports", "caTools", "cli", "clipr", "colorspace", "data.table", "dplyr", "evaluate", "ggplot2", "glue", "gtable", "highr", "httpuv", "later", "lazyeval", "neuralnet", "openssl", "plotly", "purrr", "R6", "Rcpp", "RCurl", "rlang", "rmarkdown", "rstudioapi", "shiny", "stringi", "stringr", "sys", "tibble", "tidyr", "tinytex", "xfun", "xtable"))
install.packages("xlsx")
read.xlsx("Formulario de calificación de películas - Depurado.xlsx")
read.xlsx2("Formulario de calificación de películas - Depurado.xlsx")
require(xlsx)
read.xlsx("Formulario de calificación de películas - Depurado.xlsx")
require(xlsx)
read.xlsx("Formulario de calificación de películas - Depurado.xlsx", 0)
require(xlsx)
read.xlsx("Formulario de calificación de películas - Depurado.xlsx", 1)
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
head(data)
install.packages(c("highcharter", "dplyr", "viridisLite", "forecast", "treemap", "flexdashboard"))
install.packages("installr", dependencies = TRUE)
library(installr)
updateR()
library(highcharter)
library(dplyr)
library(viridisLite)
library(forecast)
library(treemap)
library(flexdashboard)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")
),
xAxis = list(
gridLineWidth = 1
)
)
AirPassengers %>%
forecast(level = 90) %>%
hchart() %>%
hc_add_theme(thm)
data("USArrests", package = "datasets")
data("usgeojson")
USArrests <- USArrests %>%
mutate(state = rownames(.))
n <- 4
colstops <- data.frame(
q = 0:n/n,
c = substring(viridis(n + 1), 0, 7)) %>%
list_parse2()
highchart() %>%
hc_add_series_map(usgeojson, USArrests, name = "Sales",
value = "Murder", joinBy = c("woename", "state"),
dataLabels = list(enabled = TRUE,
format = '{point.properties.postalcode}')) %>%
hc_colorAxis(stops = colstops) %>%
hc_legend(valueDecimals = 0, valueSuffix = "%") %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_add_theme(thm)
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
highchart() %>%
hc_add_series_treemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified") %>%
hc_add_theme(thm)
set.seed(2)
nprods <- 10
dfitems %>%
sample_n(nprods) %>%
.$labels %>%
rep(times = sort(sample( 1e4:2e4, size = nprods), decreasing = TRUE)) %>%
factor(levels = unique(.)) %>%
hchart(showInLegend = FALSE, name = "Sales", pointWidth = 10) %>%
hc_add_theme(thm) %>%
hc_chart(type = "bar")
library(highcharter)
library(dplyr)
library(viridisLite)
library(forecast)
library(treemap)
library(flexdashboard)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")
),
xAxis = list(
gridLineWidth = 1
)
)
AirPassengers %>%
forecast(level = 90) %>%
hchart() %>%
hc_add_theme(thm)
data("USArrests", package = "datasets")
data("usgeojson")
USArrests <- USArrests %>%
mutate(state = rownames(.))
n <- 4
colstops <- data.frame(
q = 0:n/n,
c = substring(viridis(n + 1), 0, 7)) %>%
list_parse2()
highchart() %>%
hc_add_series_map(usgeojson, USArrests, name = "Sales",
value = "Murder", joinBy = c("woename", "state"),
dataLabels = list(enabled = TRUE,
format = '{point.properties.postalcode}')) %>%
hc_colorAxis(stops = colstops) %>%
hc_legend(valueDecimals = 0, valueSuffix = "%") %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_add_theme(thm)
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
highchart() %>%
hc_add_series_treemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified") %>%
hc_add_theme(thm)
set.seed(2)
nprods <- 10
dfitems %>%
sample_n(nprods) %>%
.$labels %>%
rep(times = sort(sample( 1e4:2e4, size = nprods), decreasing = TRUE)) %>%
factor(levels = unique(.)) %>%
hchart(showInLegend = FALSE, name = "Sales", pointWidth = 10) %>%
hc_add_theme(thm) %>%
hc_chart(type = "bar")
library(highcharter)
library(dplyr)
library(viridisLite)
library(forecast)
library(treemap)
library(flexdashboard)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")
),
xAxis = list(
gridLineWidth = 1
)
)
AirPassengers %>%
forecast(level = 90) %>%
hchart() %>%
hc_add_theme(thm)
data("USArrests", package = "datasets")
data("usgeojson")
USArrests <- USArrests %>%
mutate(state = rownames(.))
n <- 4
colstops <- data.frame(
q = 0:n/n,
c = substring(viridis(n + 1), 0, 7)) %>%
list_parse2()
highchart() %>%
hc_add_series_map(usgeojson, USArrests, name = "Sales",
value = "Murder", joinBy = c("woename", "state"),
dataLabels = list(enabled = TRUE,
format = '{point.properties.postalcode}')) %>%
hc_colorAxis(stops = colstops) %>%
hc_legend(valueDecimals = 0, valueSuffix = "%") %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_add_theme(thm)
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
highchart() %>%
hc_add_series_treemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified") %>%
hc_add_theme(thm)
set.seed(2)
nprods <- 10
dfitems %>%
sample_n(nprods) %>%
.$labels %>%
rep(times = sort(sample( 1e4:2e4, size = nprods), decreasing = TRUE)) %>%
factor(levels = unique(.)) %>%
hchart(showInLegend = FALSE, name = "Sales", pointWidth = 10) %>%
hc_add_theme(thm) %>%
hc_chart(type = "bar")
library(highcharter)
library(dplyr)
library(viridisLite)
library(forecast)
library(treemap)
library(flexdashboard)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")
),
xAxis = list(
gridLineWidth = 1
)
)
AirPassengers %>%
forecast(level = 90) %>%
hchart() %>%
hc_add_theme(thm)
data("USArrests", package = "datasets")
data("usgeojson")
USArrests <- USArrests %>%
mutate(state = rownames(.))
n <- 4
colstops <- data.frame(
q = 0:n/n,
c = substring(viridis(n + 1), 0, 7)) %>%
list_parse2()
highchart() %>%
hc_add_series_map(usgeojson, USArrests, name = "Sales",
value = "Murder", joinBy = c("woename", "state"),
dataLabels = list(enabled = TRUE,
format = '{point.properties.postalcode}')) %>%
hc_colorAxis(stops = colstops) %>%
hc_legend(valueDecimals = 0, valueSuffix = "%") %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_add_theme(thm)
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
highchart() %>%
hc_add_series_treemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified") %>%
hc_add_theme(thm)
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
highchart() %>%
hctreemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified") %>%
hc_add_theme(thm)
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
highchart() %>%
hctreemap2(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified") %>%
hc_add_theme(thm)
set.seed(2)
nprods <- 10
dfitems %>%
sample_n(nprods) %>%
.$labels %>%
rep(times = sort(sample( 1e4:2e4, size = nprods), decreasing = TRUE)) %>%
factor(levels = unique(.)) %>%
hchart(showInLegend = FALSE, name = "Sales", pointWidth = 10) %>%
hc_add_theme(thm) %>%
hc_chart(type = "bar")
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
highchart() %>%
hc_add_series_treemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified") %>%
hc_add_theme(thm)
head(tm)
data("Groceries", package = "arules")
dfitems <- tbl_df(Groceries@itemInfo)
set.seed(10)
dfitemsg <- dfitems %>%
mutate(category = gsub(" ", "-", level1),
subcategory = gsub(" ", "-", level2)) %>%
group_by(category, subcategory) %>%
summarise(sales = n() ^ 3 ) %>%
ungroup() %>%
sample_n(31)
tm <- treemap(dfitemsg, index = c("category", "subcategory"),
vSize = "sales", vColor = "sales",
type = "value", palette = rev(viridis(6)))
set.seed(2)
nprods <- 10
dfitems %>%
sample_n(nprods) %>%
.$labels %>%
rep(times = sort(sample( 1e4:2e4, size = nprods), decreasing = TRUE)) %>%
factor(levels = unique(.)) %>%
hchart(showInLegend = FALSE, name = "Sales", pointWidth = 10) %>%
hc_add_theme(thm) %>%
hc_chart(type = "bar")
install.packages("nclRShiny")
install.packages("shiny")
install.packages("nclRshiny", repos="http://rcourses.github.io/drat/")
install.packages("stream")
install.packages("leaftlet")
install.packages("leaflet")
install.packages("d3heatmap")
install.packages("dygraphs")
install.packages("plotly")
install.packages("metricsgraphics")
#Carga de librerias necesarias
require(xlsx)
#Carga de la data
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
head(data)
#Carga de librerias necesarias
library(xlsx)
install.packages("xlsx")
#Carga de librerias necesarias
library(xlsx)
#Carga de la data
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
head(data)
average(data$Calificación)
average(data$Calificación)
average(data$Calificación)
mean(data$Calificación)
mean_by_genre <- aggregate.data.frame(data)
mean_by_genre <- aggregate(data[,8], list(data$Genero), mena)
mean_by_genre <- aggregate(data[,8], list(data$Genero), mean)
mean_by_genre
#Carga de librerias necesarias
library(xlsx)
#Carga de la data
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
head(data)
#calculo del promedio general y por genero
mean(data$Calificación)
mean_by_genre <- aggregate(data[,8], list(data$Genero), mean)
mean_by_genre
hist(data$Calificación)
install.packages("nclRshiny", repos="http://rcourses.github.io/drat/")
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
#Carga de librerias necesarias
library(xlsx)
#Carga de la data
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
head(data)
#calculo del promedio general y por genero
mean(data$Calificación)
mean_by_genre <- aggregate(data[,8], list(data$Genero), mean)
mean_by_genre
#histograma de calificaciones
hist(data$Calificación)
genres <- data$Genero
View(data)
install.packages("DT")
#Carga de librerias necesarias
library(xlsx)
#Carga de la data
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
head(data)
#calculo del promedio general y por genero
mean(data$Calificación)
mean_by_genre <- aggregate(data[,8], list(data$Genero), mean)
mean_by_genre
#histograma de calificaciones
hist(data$Calificación)
View(data)
data_cal <- c(data$Título, data$Genero, data$Calificación)
top_movies <- data[order(-data$Calificación)]
top_movies <- data[order(-data$Calificación), c("Titulo", "Genero", "Calificación")]
top_movies <- data[order(-data$Calificación), c("Titulo", "Genero", "Calificación"),]
top_movies <- data[order(-data$Calificación),]
head(top_movies)
top:movies <- top_movies[c(1),]
top_movies <- top_movies[c(1),]
head(top_movies)
top_movies <- top_movies[,c(1)]
head(top_movies)
top_movies <- top_movies[c("Titulo"),]
top_movies <- top_movies[c("Titulo")]
head(top_movies)
top_movies <- top_movies[, c("top_movies.Titulo", "top_movies.Genero")]
top_movies <- data[order(-data$Calificación),]
top_movies[1:5,]
top_movies[,1]
top_movies[,2]
top_movies[,c(2,4)]
top_movies <- top_movies[, c(2, 7, 8)]
head(top_movies)
#Carga de librerias necesarias
library(xlsx)
#Carga de la data
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
head(data)
#calculo del promedio general y por genero
mean(data$Calificación)
mean_by_genre <- aggregate(data[,8], list(data$Genero), mean)
mean_by_genre
#histograma de calificaciones
hist(data$Calificación)
top_movies <- data[order(-data$Calificación),]
top_movies <- top_movies[, c(2, 7, 8)]
View(data)
install.packages("nclrShiny")
#Carga de librerias necesarias
library(xlsx)
#Carga de la data
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
head(data)
#calculo del promedio general y por genero
mean(data$Calificación)
mean_by_genre <- aggregate(data[,8], list(data$Genero), mean)
mean_by_genre
#histograma de calificaciones
hist(data$Calificación)
top_movies <- data[order(-data$Calificación),]
top_movies <- top_movies[, c(2, 7, 8)]
View(data)
View(data)
#Carga de librerias necesarias
library(xlsx)
#Carga de la data
data <- read.xlsx("Formulario de calificación de películas - Depurado.xlsx", sheetIndex = 1, encoding="UTF-8")
head(data)
#calculo del promedio general y por genero
mean(data$Calificación)
mean_by_genre <- aggregate(data[,8], list(data$Genero), mean)
mean_by_genre
#histograma de calificaciones
hist(data$Calificación)
top_movies <- data[order(-data$Calificación),]
top_movies <- top_movies[, c(2, 7, 8)]
View(top_movies)
View(top_movies)
View(data)
View(data)
